//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer $Globals
{
    float   c = 0.100000001;            // Offset:    0, size:    4
}

cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float3  gFogColor;                  // Offset:  128, size:   12
    float   gFogStart;                  // Offset:  140, size:    4
    float   gFogRange;                  // Offset:  144, size:    4
    float   gStartOfLOD;                // Offset:  148, size:    4
}

//
// 2 local object(s)
//
Texture2D gHeightMap;
Texture2D gNormalMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 LightTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.TexTess.x; v1.y <- vin.TexTess.y; 
                //   o1.x <- <VS return value>.TexTess.x; o1.y <- <VS return value>.TexTess.y; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 38 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainBlock.fx"
                mov r0.xy, v1.xyxx  // r0.x <- vout.TexTess.x; r0.y <- vout.TexTess.y
                mov r1.xyz, v0.xyzx  // r1.x <- vout.PosL.x; r1.y <- vout.PosL.y; r1.z <- vout.PosL.z
                mov o0.xyz, r1.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o1.x <- <HS return value>.TexTess.x; o1.y <- <HS return value>.TexTess.y; 
                //   o0.x <- <HS return value>.PosL.x; o0.y <- <HS return value>.PosL.y; o0.z <- <HS return value>.PosL.z; 
                //   v[0][0].x <- p[0].PosL.x; v[0][0].y <- p[0].PosL.y; v[0][0].z <- p[0].PosL.z; 
                //   v[0][1].x <- p[0].TexTess.x; v[0][1].y <- p[0].TexTess.y; 
                //   v[1][0].x <- p[1].PosL.x; v[1][0].y <- p[1].PosL.y; v[1][0].z <- p[1].PosL.z; 
                //   v[1][1].x <- p[1].TexTess.x; v[1][1].y <- p[1].TexTess.y; 
                //   v[2][0].x <- p[2].PosL.x; v[2][0].y <- p[2].PosL.y; v[2][0].z <- p[2].PosL.z; 
                //   v[2][1].x <- p[2].TexTess.x; v[2][1].y <- p[2].TexTess.y; 
                //   v[3][0].x <- p[3].PosL.x; v[3][0].y <- p[3].PosL.y; v[3][0].z <- p[3].PosL.z; 
                //   v[3][1].x <- p[3].TexTess.x; v[3][1].y <- p[3].TexTess.y
                //
                #line 82 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainBlock.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosL.x; r0.z <- hout.PosL.y; r0.w <- hout.PosL.z
                mov r1.xy, v[r0.x + 0][1].xyxx  // r1.x <- hout.TexTess.x; r1.y <- hout.TexTess.y
                mov o0.xyz, r0.yzwy
                mov o1.xy, r1.xyxx
                ret 
                hs_join_phase 
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 2
                
                #line 55
                mov r0.x, l(1.000000)  // r0.x <- pt.EdgeTess[0]
                mov r0.y, l(1.000000)  // r0.y <- pt.EdgeTess[1]
                mov r1.x, l(1.000000)  // r1.x <- pt.EdgeTess[2]
                mov r1.y, l(1.000000)  // r1.y <- pt.EdgeTess[3]
                mov r1.z, l(1.000000)  // r1.z <- pt.InsideTess[0]
                mov r1.w, l(1.000000)  // r1.w <- pt.InsideTess[1]
                mov r1.x, r1.x  // r1.x <- <ConstantHS return value>.EdgeTess[2]
                mov r1.y, r1.y  // r1.y <- <ConstantHS return value>.EdgeTess[3]
                mov r1.z, r1.z  // r1.z <- <ConstantHS return value>.InsideTess[0]
                mov r1.w, r1.w  // r1.w <- <ConstantHS return value>.InsideTess[1]
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.EdgeTess[0]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.EdgeTess[1]
                min o0.x, r0.x, l(64.000000)
                min o1.x, r0.y, l(64.000000)
                min r0.xyzw, r1.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // r0.x <- <ConstantHS return value>.EdgeTess[2]; r0.y <- <ConstantHS return value>.EdgeTess[3]; r0.z <- <ConstantHS return value>.InsideTess[0]; r0.w <- <ConstantHS return value>.InsideTess[1]
                mov o2.x, r0.x
                mov o3.x, r0.y
                mov o4.x, r0.z
                mov o5.x, r0.w
                ret 
                // Approximately 26 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float c;                           // Offset:    0 Size:     4
                //      = 0x3dcccccd 
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float3 gFogColor;                  // Offset:  128 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  140 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  144 Size:     4 [unused]
                //   float gStartOfLOD;                 // Offset:  148 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // $Globals                          cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[8], immediateIndexed
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_temps 3
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vpc3.x <- patchTess.EdgeTess[3]; 
                //   vpc4.x <- patchTess.InsideTess[0]; 
                //   vpc5.x <- patchTess.InsideTess[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o2.x <- <DS return value>.TexTess.x; o2.y <- <DS return value>.TexTess.y; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- quad[0].PosL.x; vicp[0][0].y <- quad[0].PosL.y; vicp[0][0].z <- quad[0].PosL.z; 
                //   vicp[0][1].x <- quad[0].TexTess.x; vicp[0][1].y <- quad[0].TexTess.y; 
                //   vicp[1][0].x <- quad[1].PosL.x; vicp[1][0].y <- quad[1].PosL.y; vicp[1][0].z <- quad[1].PosL.z; 
                //   vicp[1][1].x <- quad[1].TexTess.x; vicp[1][1].y <- quad[1].TexTess.y; 
                //   vicp[2][0].x <- quad[2].PosL.x; vicp[2][0].y <- quad[2].PosL.y; vicp[2][0].z <- quad[2].PosL.z; 
                //   vicp[2][1].x <- quad[2].TexTess.x; vicp[2][1].y <- quad[2].TexTess.y; 
                //   vicp[3][0].x <- quad[3].PosL.x; vicp[3][0].y <- quad[3].PosL.y; vicp[3][0].z <- quad[3].PosL.z; 
                //   vicp[3][1].x <- quad[3].TexTess.x; vicp[3][1].y <- quad[3].TexTess.y
                //
                #line 102 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainBlock.fx"
                mov r0.xyz, -vicp[0][0].xyzx
                add r0.xyz, r0.xyzx, vicp[1][0].xyzx
                mul r0.xyz, r0.xyzx, vDomain.xxxx
                add r0.xyz, r0.xyzx, vicp[0][0].xyzx
                mov r1.xyz, -vicp[2][0].xyzx
                add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                mul r1.xyz, r1.xyzx, vDomain.xxxx
                add r1.xyz, r1.xyzx, vicp[2][0].xyzx
                mov r2.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, vDomain.yyyy
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 107
                mov r1.xy, -vicp[0][1].xyxx
                add r1.xy, r1.xyxx, vicp[1][1].xyxx
                mul r1.xy, r1.xyxx, vDomain.xxxx
                add r1.xy, r1.xyxx, vicp[0][1].xyxx
                mov r1.zw, -vicp[2][1].xxxy
                add r1.zw, r1.zzzw, vicp[3][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[2][1].xxxy
                mov r2.xy, -r1.xyxx
                add r1.zw, r1.zzzw, r2.xxxy
                mul r1.zw, r1.zzzw, vDomain.yyyy
                add r1.xy, r1.zwzz, r1.xyxx  // r1.x <- dout.TexTess.x; r1.y <- dout.TexTess.y
                
                #line 114
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb1[0].xyzw  // r2.x <- dout.PosW.x
                dp4 r2.y, r0.xyzw, cb1[1].xyzw  // r2.y <- dout.PosW.y
                dp4 r2.z, r0.xyzw, cb1[2].xyzw  // r2.z <- dout.PosW.z
                mov r2.w, l(1.000000)
                dp4 r0.x, r2.xyzw, cb1[4].xyzw  // r0.x <- dout.PosH.x
                dp4 r0.y, r2.xyzw, cb1[5].xyzw  // r0.y <- dout.PosH.y
                dp4 r0.w, r2.xyzw, cb1[7].xyzw  // r0.w <- dout.PosH.w
                mul r0.z, r0.w, cb0[0].x
                add r0.z, r0.z, l(1.000000)
                log r0.z, r0.z
                mul r0.z, r0.z, l(0.693147)
                mul r1.z, cb0[0].x, l(20000.000000)
                add r1.z, r1.z, l(1.000000)
                log r1.z, r1.z
                mul r1.z, r1.z, l(0.693147)
                div r0.z, r0.z, r1.z
                mul r0.z, r0.w, r0.z  // r0.z <- dout.PosH.z
                mov o0.xyw, r0.xyxw
                mov o0.z, r0.z
                mov o1.xyz, r2.xyzx
                mov o2.xy, r1.xyxx
                ret 
                // Approximately 47 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
                //   float3 gFogColor;                  // Offset:  128 Size:    12
                //   float gFogStart;                   // Offset:  140 Size:     4
                //   float gFogRange;                   // Offset:  144 Size:     4
                //   float gStartOfLOD;                 // Offset:  148 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[10], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.TexTess.x; v2.y <- pin.TexTess.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 124 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainBlock.fx"
                mov r0.xyz, l(1.000000,0.700000,0.700000,0)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distance
                ge r1.x, r0.w, cb0[9].y
                if_nz r1.x
                  lt r1.x, l(-0.050000), l(0.000000)
                  and r1.x, r1.x, l(-1)
                  discard_nz r1.x
                endif 
                lt r1.x, cb0[8].w, r0.w
                if_nz r1.x
                
                #line 135
                  mov r1.x, -cb0[8].w
                  add r1.x, r0.w, r1.x
                  div r1.x, r1.x, cb0[9].x
                  mov r1.yzw, -r0.xxyz
                  add r1.yzw, r1.yyzw, cb0[8].xxyz
                  mul r1.xyz, r1.yzwy, r1.xxxx
                  add r1.xyz, r0.xyzx, r1.xyzx
                  max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                  min r0.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  add r1.x, cb0[8].w, cb0[9].x
                  lt r0.w, r1.x, r0.w
                  if_nz r0.w
                    lt r0.w, l(-0.050000), l(0.000000)
                    and r0.w, r0.w, l(-1)
                    discard_nz r0.w
                  endif 
                endif 
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 31 instruction slots used
                            
            };
        }

    }

}

