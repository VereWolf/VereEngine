//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer $Globals
{
    float   c = 0.100000001;            // Offset:    0, size:    4
}

cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float   gSpacing;                   // Offset:  128, size:    4
    float   gRadius;                    // Offset:  132, size:    4
    float3  gCentrePos;                 // Offset:  144, size:   12
    float3  gOffset;                    // Offset:  160, size:   12
    float3  gTang;                      // Offset:  176, size:   12
    float   gLevel;                     // Offset:  188, size:    4
    float   gFarZ;                      // Offset:  192, size:    4
    float   gFarModifier;               // Offset:  196, size:    4
    float3  gCenterOfPlanet;            // Offset:  208, size:   12
    float   gRadiusOfPlanet;            // Offset:  220, size:    4
    float   gFogStart;                  // Offset:  224, size:    4
    float   gFogRange;                  // Offset:  228, size:    4
    float3  gFogColor;                  // Offset:  240, size:   12
}

//
// 2 local object(s)
//
SamplerState samHeightMap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samNormalMap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 LightTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.TexTess.x; v1.y <- vin.TexTess.y; 
                //   o1.x <- <VS return value>.TexTess.x; o1.y <- <VS return value>.TexTess.y; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 64 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_05_11\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                mov r0.xy, v1.xyxx  // r0.x <- vout.TexTess.x; r0.y <- vout.TexTess.y
                mov r1.xyz, v0.xyzx  // r1.x <- vout.PosL.x; r1.y <- vout.PosL.y; r1.z <- vout.PosL.z
                mov o0.xyz, r1.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o1.x <- <HS return value>.TexTess.x; o1.y <- <HS return value>.TexTess.y; 
                //   o0.x <- <HS return value>.PosL.x; o0.y <- <HS return value>.PosL.y; o0.z <- <HS return value>.PosL.z; 
                //   v[0][0].x <- p[0].PosL.x; v[0][0].y <- p[0].PosL.y; v[0][0].z <- p[0].PosL.z; 
                //   v[0][1].x <- p[0].TexTess.x; v[0][1].y <- p[0].TexTess.y; 
                //   v[1][0].x <- p[1].PosL.x; v[1][0].y <- p[1].PosL.y; v[1][0].z <- p[1].PosL.z; 
                //   v[1][1].x <- p[1].TexTess.x; v[1][1].y <- p[1].TexTess.y; 
                //   v[2][0].x <- p[2].PosL.x; v[2][0].y <- p[2].PosL.y; v[2][0].z <- p[2].PosL.z; 
                //   v[2][1].x <- p[2].TexTess.x; v[2][1].y <- p[2].TexTess.y; 
                //   v[3][0].x <- p[3].PosL.x; v[3][0].y <- p[3].PosL.y; v[3][0].z <- p[3].PosL.z; 
                //   v[3][1].x <- p[3].TexTess.x; v[3][1].y <- p[3].TexTess.y
                //
                #line 110 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_05_11\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosL.x; r0.z <- hout.PosL.y; r0.w <- hout.PosL.z
                mov r1.xy, v[r0.x + 0][1].xyxx  // r1.x <- hout.TexTess.x; r1.y <- hout.TexTess.y
                mov o0.xyz, r0.yzwy
                mov o1.xy, r1.xyxx
                ret 
                hs_join_phase 
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 2
                
                #line 81
                mov r0.x, l(1.000000)  // r0.x <- pt.EdgeTess[0]
                mov r0.y, l(1.000000)  // r0.y <- pt.EdgeTess[1]
                mov r1.x, l(1.000000)  // r1.x <- pt.EdgeTess[2]
                mov r1.y, l(1.000000)  // r1.y <- pt.EdgeTess[3]
                mov r1.z, l(1.000000)  // r1.z <- pt.InsideTess[0]
                mov r1.w, l(1.000000)  // r1.w <- pt.InsideTess[1]
                mov r1.x, r1.x  // r1.x <- <ConstantHS return value>.EdgeTess[2]
                mov r1.y, r1.y  // r1.y <- <ConstantHS return value>.EdgeTess[3]
                mov r1.z, r1.z  // r1.z <- <ConstantHS return value>.InsideTess[0]
                mov r1.w, r1.w  // r1.w <- <ConstantHS return value>.InsideTess[1]
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.EdgeTess[0]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.EdgeTess[1]
                min o0.x, r0.x, l(64.000000)
                min o1.x, r0.y, l(64.000000)
                min r0.xyzw, r1.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // r0.x <- <ConstantHS return value>.EdgeTess[2]; r0.y <- <ConstantHS return value>.EdgeTess[3]; r0.z <- <ConstantHS return value>.InsideTess[0]; r0.w <- <ConstantHS return value>.InsideTess[1]
                mov o2.x, r0.x
                mov o3.x, r0.y
                mov o4.x, r0.z
                mov o5.x, r0.w
                ret 
                // Approximately 26 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float gSpacing;                    // Offset:  128 Size:     4 [unused]
                //   float gRadius;                     // Offset:  132 Size:     4
                //   float3 gCentrePos;                 // Offset:  144 Size:    12
                //   float3 gOffset;                    // Offset:  160 Size:    12 [unused]
                //   float3 gTang;                      // Offset:  176 Size:    12 [unused]
                //   float gLevel;                      // Offset:  188 Size:     4 [unused]
                //   float gFarZ;                       // Offset:  192 Size:     4
                //   float gFarModifier;                // Offset:  196 Size:     4
                //   float3 gCenterOfPlanet;            // Offset:  208 Size:    12 [unused]
                //   float gRadiusOfPlanet;             // Offset:  220 Size:     4 [unused]
                //   float gFogStart;                   // Offset:  224 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  228 Size:     4 [unused]
                //   float3 gFogColor;                  // Offset:  240 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 1   xyz         1     NONE   float   xyz 
                // POSITION                 2   xyz         2     NONE   float   xyz 
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // NORMAL                   2   xyz         4     NONE   float       
                // NORMAL                   3   xyz         5     NONE   float       
                // TEXCOORD                 0   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o6.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vpc3.x <- patchTess.EdgeTess[3]; 
                //   vpc4.x <- patchTess.InsideTess[0]; 
                //   vpc5.x <- patchTess.InsideTess[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o4.x <- <DS return value>.BinormW.x; o4.y <- <DS return value>.BinormW.y; o4.z <- <DS return value>.BinormW.z; 
                //   o5.x <- <DS return value>.TangW.x; o5.y <- <DS return value>.TangW.y; o5.z <- <DS return value>.TangW.z; 
                //   o6.x <- <DS return value>.TexTess.x; o6.y <- <DS return value>.TexTess.y; 
                //   o3.x <- <DS return value>.NormalW.x; o3.y <- <DS return value>.NormalW.y; o3.z <- <DS return value>.NormalW.z; 
                //   o2.x <- <DS return value>.PosV.x; o2.y <- <DS return value>.PosV.y; o2.z <- <DS return value>.PosV.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- quad[0].PosL.x; vicp[0][0].y <- quad[0].PosL.y; vicp[0][0].z <- quad[0].PosL.z; 
                //   vicp[0][1].x <- quad[0].TexTess.x; vicp[0][1].y <- quad[0].TexTess.y; 
                //   vicp[1][0].x <- quad[1].PosL.x; vicp[1][0].y <- quad[1].PosL.y; vicp[1][0].z <- quad[1].PosL.z; 
                //   vicp[1][1].x <- quad[1].TexTess.x; vicp[1][1].y <- quad[1].TexTess.y; 
                //   vicp[2][0].x <- quad[2].PosL.x; vicp[2][0].y <- quad[2].PosL.y; vicp[2][0].z <- quad[2].PosL.z; 
                //   vicp[2][1].x <- quad[2].TexTess.x; vicp[2][1].y <- quad[2].TexTess.y; 
                //   vicp[3][0].x <- quad[3].PosL.x; vicp[3][0].y <- quad[3].PosL.y; vicp[3][0].z <- quad[3].PosL.z; 
                //   vicp[3][1].x <- quad[3].TexTess.x; vicp[3][1].y <- quad[3].TexTess.y
                //
                #line 134 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_05_11\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                mov r0.xyz, -vicp[0][0].xyzx
                add r0.xyz, r0.xyzx, vicp[1][0].xyzx
                mul r0.xyz, r0.xyzx, vDomain.xxxx
                add r0.xyz, r0.xyzx, vicp[0][0].xyzx
                mov r1.xyz, -vicp[2][0].xyzx
                add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                mul r1.xyz, r1.xyzx, vDomain.xxxx
                add r1.xyz, r1.xyzx, vicp[2][0].xyzx
                mov r2.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, vDomain.yyyy
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 139
                mov r1.xy, -vicp[0][1].xyxx
                add r1.xy, r1.xyxx, vicp[1][1].xyxx
                mul r1.xy, r1.xyxx, vDomain.xxxx
                add r1.xy, r1.xyxx, vicp[0][1].xyxx
                mov r1.zw, -vicp[2][1].xxxy
                add r1.zw, r1.zzzw, vicp[3][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[2][1].xxxy
                mov r2.xy, -r1.xyxx
                add r1.zw, r1.zzzw, r2.xxxy
                mul r1.zw, r1.zzzw, vDomain.yyyy
                add r1.xy, r1.zwzz, r1.xyxx  // r1.x <- dout.TexTess.x; r1.y <- dout.TexTess.y
                
                #line 144
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // r2.x <- dout.PosW.x
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // r2.y <- dout.PosW.y
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // r2.z <- dout.PosW.z
                
                #line 148
                mov r0.xyz, -cb0[9].xyzx
                add r0.xyz, r0.xyzx, r2.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- N.x; r0.y <- N.y; r0.z <- N.z
                
                #line 168
                mov r0.xyz, r0.xyzx  // r0.x <- dout.NormalW.x; r0.y <- dout.NormalW.y; r0.z <- dout.NormalW.z
                mul r2.xyz, r0.xyzx, cb0[8].yyyy
                add r2.xyz, r2.xyzx, cb0[9].xyzx  // r2.x <- dout.PosW.x; r2.y <- dout.PosW.y; r2.z <- dout.PosW.z
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[4].xyzw  // r3.x <- dout.PosV.x
                dp4 r3.y, r2.xyzw, cb0[5].xyzw  // r3.y <- dout.PosV.y
                dp4 r3.z, r2.xyzw, cb0[6].xyzw  // r3.z <- dout.PosV.z
                dp4 r4.x, r2.xyzw, cb0[4].xyzw  // r4.x <- dout.PosH.x
                dp4 r4.y, r2.xyzw, cb0[5].xyzw  // r4.y <- dout.PosH.y
                dp4 r4.w, r2.xyzw, cb0[7].xyzw  // r4.w <- dout.PosH.w
                mul r0.w, r4.w, cb0[12].y
                add r0.w, r0.w, l(1.000000)
                log r0.w, r0.w
                mul r0.w, r0.w, l(0.693147)
                mul r1.z, cb0[12].x, cb0[12].y
                add r1.z, r1.z, l(1.000000)
                log r1.z, r1.z
                mul r1.z, r1.z, l(0.693147)
                div r0.w, r0.w, r1.z
                mul r0.w, r4.w, r0.w  // r0.w <- dout.PosH.z
                mov o0.xyw, r4.xyxw
                mov o0.z, r0.w
                mov o1.xyz, r2.xyzx
                mov o2.xyz, r3.xyzx
                mov o3.xyz, r0.xyzx
                mov o6.xy, r1.xyxx
                ret 
                // Approximately 60 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 1   xyz         1     NONE   float       
                // POSITION                 2   xyz         2     NONE   float       
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // NORMAL                   2   xyz         4     NONE   float       
                // NORMAL                   3   xyz         5     NONE   float       
                // TEXCOORD                 0   xy          6     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.PosV.x; v2.y <- pin.PosV.y; v2.z <- pin.PosV.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.BinormW.x; v4.y <- pin.BinormW.y; v4.z <- pin.BinormW.z; 
                //   v5.x <- pin.TangW.x; v5.y <- pin.TangW.y; v5.z <- pin.TangW.z; 
                //   v6.x <- pin.TexTess.x; v6.y <- pin.TexTess.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 183 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_05_11\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                mov r0.xyz, l(1.000000,1.000000,1.000000,0)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                mov r1.xyz, v3.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 193
                nop 
                
                #line 202
                dp3 r0.w, r1.xzyx, l(0.000000, 0.000000, 1.000000, 0.000000)
                add r0.w, r0.w, l(1.000000)
                mul r0.w, r0.w, l(0.500000)
                add r0.w, r0.w, l(0.600000)
                mul r0.xyz, r0.xyzx, r0.wwww
                div r0.xyz, r0.xyzx, l(1.600000, 1.600000, 1.600000, 0.000000)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 208
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 12 instruction slots used
                            
            };
        }

    }

}

