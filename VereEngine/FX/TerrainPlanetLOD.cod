//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer $Globals
{
    float   c = 0.100000001;            // Offset:    0, size:    4
}

cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gViewProj;                 // Offset:   64, size:   64
    float4x4 gView;                     // Offset:  128, size:   64
    float4x4 gProj;                     // Offset:  192, size:   64
    float   gSpacing;                   // Offset:  256, size:    4
    float   gRadius;                    // Offset:  260, size:    4
    float3  gCentrePos;                 // Offset:  272, size:   12
    float3  gOffset;                    // Offset:  288, size:   12
    float3  gTang;                      // Offset:  304, size:   12
    float   gLevel;                     // Offset:  316, size:    4
    float3  gCenterOfPlanet;            // Offset:  320, size:   12
    float   gRadiusOfPlanet;            // Offset:  332, size:    4
    float   gFogStart;                  // Offset:  336, size:    4
    float   gFogRange;                  // Offset:  340, size:    4
    float3  gFogColor;                  // Offset:  352, size:   12
}

//
// 4 local object(s)
//
SamplerState samHeightMap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState samNormalMap
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
Texture2D gHeightMap;
Texture2D gNormalMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 LightTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.TexTess.x; v1.y <- vin.TexTess.y; 
                //   o1.x <- <VS return value>.TexTess.x; o1.y <- <VS return value>.TexTess.y; 
                //   o0.x <- <VS return value>.PosL.x; o0.y <- <VS return value>.PosL.y; o0.z <- <VS return value>.PosL.z
                //
                #line 64 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                mov r0.xy, v1.xyxx  // r0.x <- vout.TexTess.x; r0.y <- vout.TexTess.y
                mov r1.xyz, v0.xyzx  // r1.x <- vout.PosL.x; r1.y <- vout.PosL.y; r1.z <- vout.PosL.z
                mov o0.xyz, r1.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 5 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float   x   
                // SV_TessFactor            1   x           1 QUADEDGE   float   x   
                // SV_TessFactor            2   x           2 QUADEDGE   float   x   
                // SV_TessFactor            3   x           3 QUADEDGE   float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT   float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT   float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Integer           
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_integer
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed | skipOptimization
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                //
                // Initial variable locations:
                //   vOutputControlPointID.x <- i; 
                //   vPrim.x <- patchId; 
                //   o1.x <- <HS return value>.TexTess.x; o1.y <- <HS return value>.TexTess.y; 
                //   o0.x <- <HS return value>.PosL.x; o0.y <- <HS return value>.PosL.y; o0.z <- <HS return value>.PosL.z; 
                //   v[0][0].x <- p[0].PosL.x; v[0][0].y <- p[0].PosL.y; v[0][0].z <- p[0].PosL.z; 
                //   v[0][1].x <- p[0].TexTess.x; v[0][1].y <- p[0].TexTess.y; 
                //   v[1][0].x <- p[1].PosL.x; v[1][0].y <- p[1].PosL.y; v[1][0].z <- p[1].PosL.z; 
                //   v[1][1].x <- p[1].TexTess.x; v[1][1].y <- p[1].TexTess.y; 
                //   v[2][0].x <- p[2].PosL.x; v[2][0].y <- p[2].PosL.y; v[2][0].z <- p[2].PosL.z; 
                //   v[2][1].x <- p[2].TexTess.x; v[2][1].y <- p[2].TexTess.y; 
                //   v[3][0].x <- p[3].PosL.x; v[3][0].y <- p[3].PosL.y; v[3][0].z <- p[3].PosL.z; 
                //   v[3][1].x <- p[3].TexTess.x; v[3][1].y <- p[3].TexTess.y
                //
                #line 110 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                mov r0.x, vOutputControlPointID
                mov r0.yzw, v[r0.x + 0][0].xxyz  // r0.y <- hout.PosL.x; r0.z <- hout.PosL.y; r0.w <- hout.PosL.z
                mov r1.xy, v[r0.x + 0][1].xyxx  // r1.x <- hout.TexTess.x; r1.y <- hout.TexTess.y
                mov o0.xyz, r0.yzwy
                mov o1.xy, r1.xyxx
                ret 
                hs_join_phase 
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 2
                
                #line 81
                mov r0.x, l(1.000000)  // r0.x <- pt.EdgeTess[0]
                mov r0.y, l(1.000000)  // r0.y <- pt.EdgeTess[1]
                mov r1.x, l(1.000000)  // r1.x <- pt.EdgeTess[2]
                mov r1.y, l(1.000000)  // r1.y <- pt.EdgeTess[3]
                mov r1.z, l(1.000000)  // r1.z <- pt.InsideTess[0]
                mov r1.w, l(1.000000)  // r1.w <- pt.InsideTess[1]
                mov r1.x, r1.x  // r1.x <- <ConstantHS return value>.EdgeTess[2]
                mov r1.y, r1.y  // r1.y <- <ConstantHS return value>.EdgeTess[3]
                mov r1.z, r1.z  // r1.z <- <ConstantHS return value>.InsideTess[0]
                mov r1.w, r1.w  // r1.w <- <ConstantHS return value>.InsideTess[1]
                mov r0.x, r0.x  // r0.x <- <ConstantHS return value>.EdgeTess[0]
                mov r0.y, r0.y  // r0.y <- <ConstantHS return value>.EdgeTess[1]
                min o0.x, r0.x, l(64.000000)
                min o1.x, r0.y, l(64.000000)
                min r0.xyzw, r1.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // r0.x <- <ConstantHS return value>.EdgeTess[2]; r0.y <- <ConstantHS return value>.EdgeTess[3]; r0.z <- <ConstantHS return value>.InsideTess[0]; r0.w <- <ConstantHS return value>.InsideTess[1]
                mov o2.x, r0.x
                mov o3.x, r0.y
                mov o4.x, r0.z
                mov o5.x, r0.w
                ret 
                // Approximately 26 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float c;                           // Offset:    0 Size:     4
                //      = 0x3dcccccd 
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //   float4x4 gView;                    // Offset:  128 Size:    64 [unused]
                //   float4x4 gProj;                    // Offset:  192 Size:    64 [unused]
                //   float gSpacing;                    // Offset:  256 Size:     4 [unused]
                //   float gRadius;                     // Offset:  260 Size:     4
                //   float3 gCentrePos;                 // Offset:  272 Size:    12
                //   float3 gOffset;                    // Offset:  288 Size:    12
                //   float3 gTang;                      // Offset:  304 Size:    12
                //   float gLevel;                      // Offset:  316 Size:     4
                //   float3 gCenterOfPlanet;            // Offset:  320 Size:    12 [unused]
                //   float gRadiusOfPlanet;             // Offset:  332 Size:     4 [unused]
                //   float gFogStart;                   // Offset:  336 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  340 Size:     4 [unused]
                //   float3 gFogColor;                  // Offset:  352 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samHeightMap                      sampler      NA          NA             s0      1 
                // samNormalMap                      sampler      NA          NA             s1      1 
                // gHeightMap                        texture  float4          2d             t0      1 
                // gNormalMap                        texture  float4          2d             t1      1 
                // $Globals                          cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TessFactor            0   x           0 QUADEDGE   float       
                // SV_TessFactor            1   x           1 QUADEDGE   float       
                // SV_TessFactor            2   x           2 QUADEDGE   float       
                // SV_TessFactor            3   x           3 QUADEDGE   float       
                // SV_InsideTessFactor      0   x           4  QUADINT   float       
                // SV_InsideTessFactor      1   x           5  QUADINT   float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 1   xyz         1     NONE   float   xyz 
                // POSITION                 2   xyz         2     NONE   float   xyz 
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // NORMAL                   2   xyz         4     NONE   float   xyz 
                // NORMAL                   3   xyz         5     NONE   float   xyz 
                // TEXCOORD                 0   xy          6     NONE   float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[1], immediateIndexed
                dcl_constantbuffer CB1[20], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_output o6.xy
                dcl_temps 8
                //
                // Initial variable locations:
                //   vpc0.x <- patchTess.EdgeTess[0]; 
                //   vpc1.x <- patchTess.EdgeTess[1]; 
                //   vpc2.x <- patchTess.EdgeTess[2]; 
                //   vpc3.x <- patchTess.EdgeTess[3]; 
                //   vpc4.x <- patchTess.InsideTess[0]; 
                //   vpc5.x <- patchTess.InsideTess[1]; 
                //   vDomain.x <- uv.x; vDomain.y <- uv.y; 
                //   o6.x <- <DS return value>.TexTess.x; o6.y <- <DS return value>.TexTess.y; 
                //   o5.x <- <DS return value>.TangW.x; o5.y <- <DS return value>.TangW.y; o5.z <- <DS return value>.TangW.z; 
                //   o4.x <- <DS return value>.BinormW.x; o4.y <- <DS return value>.BinormW.y; o4.z <- <DS return value>.BinormW.z; 
                //   o3.x <- <DS return value>.NormalW.x; o3.y <- <DS return value>.NormalW.y; o3.z <- <DS return value>.NormalW.z; 
                //   o2.x <- <DS return value>.PosV.x; o2.y <- <DS return value>.PosV.y; o2.z <- <DS return value>.PosV.z; 
                //   o1.x <- <DS return value>.PosW.x; o1.y <- <DS return value>.PosW.y; o1.z <- <DS return value>.PosW.z; 
                //   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
                //   vicp[0][0].x <- quad[0].PosL.x; vicp[0][0].y <- quad[0].PosL.y; vicp[0][0].z <- quad[0].PosL.z; 
                //   vicp[0][1].x <- quad[0].TexTess.x; vicp[0][1].y <- quad[0].TexTess.y; 
                //   vicp[1][0].x <- quad[1].PosL.x; vicp[1][0].y <- quad[1].PosL.y; vicp[1][0].z <- quad[1].PosL.z; 
                //   vicp[1][1].x <- quad[1].TexTess.x; vicp[1][1].y <- quad[1].TexTess.y; 
                //   vicp[2][0].x <- quad[2].PosL.x; vicp[2][0].y <- quad[2].PosL.y; vicp[2][0].z <- quad[2].PosL.z; 
                //   vicp[2][1].x <- quad[2].TexTess.x; vicp[2][1].y <- quad[2].TexTess.y; 
                //   vicp[3][0].x <- quad[3].PosL.x; vicp[3][0].y <- quad[3].PosL.y; vicp[3][0].z <- quad[3].PosL.z; 
                //   vicp[3][1].x <- quad[3].TexTess.x; vicp[3][1].y <- quad[3].TexTess.y
                //
                #line 134 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                mov r0.xyz, -vicp[0][0].xyzx
                add r0.xyz, r0.xyzx, vicp[1][0].xyzx
                mul r0.xyz, r0.xyzx, vDomain.xxxx
                add r0.xyz, r0.xyzx, vicp[0][0].xyzx
                mov r1.xyz, -vicp[2][0].xyzx
                add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                mul r1.xyz, r1.xyzx, vDomain.xxxx
                add r1.xyz, r1.xyzx, vicp[2][0].xyzx
                mov r2.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r1.xyz, r1.xyzx, vDomain.yyyy
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- dout.PosW.x; r0.y <- dout.PosW.y; r0.z <- dout.PosW.z
                
                #line 139
                mov r1.xy, -vicp[0][1].xyxx
                add r1.xy, r1.xyxx, vicp[1][1].xyxx
                mul r1.xy, r1.xyxx, vDomain.xxxx
                add r1.xy, r1.xyxx, vicp[0][1].xyxx
                mov r1.zw, -vicp[2][1].xxxy
                add r1.zw, r1.zzzw, vicp[3][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[2][1].xxxy
                mov r2.xy, -r1.xyxx
                add r1.zw, r1.zzzw, r2.xxxy
                mul r1.zw, r1.zzzw, vDomain.yyyy
                add r1.xy, r1.zwzz, r1.xyxx  // r1.x <- dout.TexTess.x; r1.y <- dout.TexTess.y
                
                #line 144
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb1[0].xyzw  // r2.x <- dout.PosW.x
                dp4 r2.y, r0.xyzw, cb1[1].xyzw  // r2.y <- dout.PosW.y
                dp4 r2.z, r0.xyzw, cb1[2].xyzw  // r2.z <- dout.PosW.z
                add r0.x, r1.x, cb1[18].x
                mul r0.x, r0.x, cb1[19].w
                add r0.z, r1.y, cb1[18].y
                mul r0.y, r0.z, cb1[19].w
                itof r0.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0, r0.z
                mul r0.x, r0.x, l(2.000000)  // r0.x <- H
                mov r0.yzw, -cb1[17].zzxy
                add r0.yzw, r0.yyzw, r2.zzxy
                dp3 r1.z, r0.yzwy, r0.yzwy
                rsq r1.z, r1.z
                mul r0.yzw, r0.yyzw, r1.zzzz  // r0.y <- N.z; r0.z <- N.x; r0.w <- N.y
                mul r3.xyz, r0.zwyz, cb1[19].zxyz
                mul r4.xyz, r0.yzwy, cb1[19].xyzx
                mov r4.xyz, -r4.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                dp3 r1.z, r3.xyzx, r3.xyzx
                rsq r1.z, r1.z
                mul r3.xyz, r1.zzzz, r3.xzyx  // r3.x <- B.y; r3.y <- B.x; r3.z <- B.z
                mul r4.xyz, r0.wyzw, r3.zyxz
                mul r5.xyz, r0.yzwy, r3.xzyx
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx  // r4.x <- T.x; r4.y <- T.y; r4.z <- T.z
                itof r1.z, l(0)
                ge r1.z, r0.x, r1.z
                if_nz r1.z
                  add r1.z, r1.x, cb1[18].x
                  mul r5.x, r1.z, cb1[19].w
                  add r1.z, r1.y, cb1[18].y
                  mul r5.y, r1.z, cb1[19].w
                  itof r1.z, l(0)
                  sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t1.xyzw, s1, r1.z  // r5.x <- normalT.x; r5.y <- normalT.y; r5.z <- normalT.z
                
                #line 156
                  mov r6.x, r4.x  // r6.x <- TBN._m00
                  mov r6.y, r0.z  // r6.y <- TBN._m10
                  mov r6.z, r3.y  // r6.z <- TBN._m20
                  mov r7.x, r4.y  // r7.x <- TBN._m01
                  mov r7.y, r0.w  // r7.y <- TBN._m11
                  mov r7.z, r3.x  // r7.z <- TBN._m21
                  mov r3.x, r4.z  // r3.x <- TBN._m02
                  mov r3.y, r0.y  // r3.y <- TBN._m12
                  mov r3.z, r3.z  // r3.z <- TBN._m22
                  dp3 r4.x, r5.xyzx, r6.xyzx  // r4.x <- dout.NormalW.x
                  dp3 r4.y, r5.xyzx, r7.xyzx  // r4.y <- dout.NormalW.y
                  dp3 r4.z, r5.xyzx, r3.xyzx  // r4.z <- dout.NormalW.z
                  mul r0.yzw, r4.zzxy, cb1[19].yyzx
                  mul r3.xyz, r4.yzxy, cb1[19].zxyz
                  mov r3.xyz, -r3.xyzx
                  add r0.yzw, r0.yyzw, r3.xxyz
                  dp3 r1.z, r0.yzwy, r0.yzwy
                  rsq r1.z, r1.z
                  mul r0.yzw, r0.yyzw, r1.zzzz  // r0.y <- dout.BinormW.x; r0.z <- dout.BinormW.y; r0.w <- dout.BinormW.z
                  mul r3.xyz, r0.wyzw, r4.yzxy
                  mul r5.xyz, r0.zwyz, r4.zxyz
                  mov r5.xyz, -r5.xyzx
                  add r3.xyz, r3.xyzx, r5.xyzx  // r3.x <- dout.TangW.x; r3.y <- dout.TangW.y; r3.z <- dout.TangW.z
                  add r0.x, r0.x, cb1[16].y
                  mov r5.xyz, -cb1[17].xyzx
                  add r5.xyz, r2.xyzx, r5.xyzx
                  dp3 r1.z, r5.xyzx, r5.xyzx
                  rsq r1.z, r1.z
                  mul r5.xyz, r1.zzzz, r5.xyzx
                  mul r5.xyz, r0.xxxx, r5.xyzx
                  add r5.xyz, r5.xyzx, cb1[17].xyzx  // r5.x <- dout.PosW.x; r5.y <- dout.PosW.y; r5.z <- dout.PosW.z
                else   // Prior locations: r2.x <- dout.PosW.x; r2.y <- dout.PosW.y; r2.z <- dout.PosW.z; r0.x <- H; r0.y <- N.z; r0.z <- N.x; r0.w <- N.y; r3.x <- B.y; r3.y <- B.x; r3.z <- B.z; r4.x <- T.x; r4.y <- T.y; r4.z <- T.z
                
                #line 166
                  mov r6.xyz, -cb1[17].xyzx
                  add r2.xyz, r2.xyzx, r6.xyzx
                  dp3 r0.x, r2.xyzx, r2.xyzx
                  rsq r0.x, r0.x
                  mul r2.xyz, r0.xxxx, r2.xyzx
                  mul r2.xyz, r2.xyzx, cb1[16].yyyy
                  add r5.xyz, r2.xyzx, cb1[17].xyzx  // r5.x <- dout.PosW.x; r5.y <- dout.PosW.y; r5.z <- dout.PosW.z
                endif 
                mov r5.w, l(1.000000)
                dp4 r2.x, r5.xyzw, cb1[4].xyzw  // r2.x <- dout.PosV.x
                dp4 r2.y, r5.xyzw, cb1[5].xyzw  // r2.y <- dout.PosV.y
                dp4 r2.z, r5.xyzw, cb1[6].xyzw  // r2.z <- dout.PosV.z
                dp4 r6.x, r5.xyzw, cb1[4].xyzw  // r6.x <- dout.PosH.x
                dp4 r6.y, r5.xyzw, cb1[5].xyzw  // r6.y <- dout.PosH.y
                dp4 r6.w, r5.xyzw, cb1[7].xyzw  // r6.w <- dout.PosH.w
                mul r0.x, r6.w, cb0[0].x
                add r0.x, r0.x, l(1.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, l(0.693147)
                mul r1.z, cb0[0].x, l(999999995904.000000)
                add r1.z, r1.z, l(1.000000)
                log r1.z, r1.z
                mul r1.z, r1.z, l(0.693147)
                div r0.x, r0.x, r1.z
                mul r0.x, r6.w, r0.x  // r0.x <- dout.PosH.z
                mov o0.xyw, r6.xyxw
                mov o0.z, r0.x
                mov o1.xyz, r5.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r4.xyzx
                mov o4.xyz, r0.yzwy
                mov o5.xyz, r3.xyzx
                mov o6.xy, r1.xyxx
                ret 
                // Approximately 126 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:  128 Size:    64 [unused]
                //   float4x4 gProj;                    // Offset:  192 Size:    64 [unused]
                //   float gSpacing;                    // Offset:  256 Size:     4 [unused]
                //   float gRadius;                     // Offset:  260 Size:     4 [unused]
                //   float3 gCentrePos;                 // Offset:  272 Size:    12 [unused]
                //   float3 gOffset;                    // Offset:  288 Size:    12
                //   float3 gTang;                      // Offset:  304 Size:    12 [unused]
                //   float gLevel;                      // Offset:  316 Size:     4
                //   float3 gCenterOfPlanet;            // Offset:  320 Size:    12 [unused]
                //   float gRadiusOfPlanet;             // Offset:  332 Size:     4 [unused]
                //   float gFogStart;                   // Offset:  336 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  340 Size:     4 [unused]
                //   float3 gFogColor;                  // Offset:  352 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samHeightMap                      sampler      NA          NA             s0      1 
                // gHeightMap                        texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 1   xyz         1     NONE   float       
                // POSITION                 2   xyz         2     NONE   float       
                // NORMAL                   1   xyz         3     NONE   float   xyz 
                // NORMAL                   2   xyz         4     NONE   float       
                // NORMAL                   3   xyz         5     NONE   float       
                // TEXCOORD                 0   xy          6     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[20], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.PosV.x; v2.y <- pin.PosV.y; v2.z <- pin.PosV.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.BinormW.x; v4.y <- pin.BinormW.y; v4.z <- pin.BinormW.z; 
                //   v5.x <- pin.TangW.x; v5.y <- pin.TangW.y; v5.z <- pin.TangW.z; 
                //   v6.x <- pin.TexTess.x; v6.y <- pin.TexTess.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 180 "C:\Users\VereWolf\Documents\VereEngine\VereEngine_Build_2017_03_02\VereEngine\VereEngine\FX\TerrainPlanetLOD.fx"
                add r0.x, v6.x, cb0[18].x
                mul r0.x, r0.x, cb0[19].w
                add r0.z, v6.y, cb0[18].y
                mul r0.y, r0.z, cb0[19].w
                itof r0.z, l(0)
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0, r0.z
                mul r0.x, r0.x, l(2.000000)  // r0.x <- H
                mov r0.yzw, l(0,1.000000,1.000000,1.000000)  // r0.y <- color.x; r0.z <- color.y; r0.w <- color.z
                mov r1.xyz, v3.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                lt r0.x, r0.x, l(0.000000)
                if_nz r0.x
                  mov r0.yzw, l(0,0.200000,0.350000,0.900000)
                  mov r1.xyz, l(0,1.000000,0,0)
                endif 
                
                #line 192
                nop 
                
                #line 201
                dp3 r0.x, r1.xzyx, l(0.000000, 0.000000, 1.000000, 0.000000)
                add r0.x, r0.x, l(0.600000)
                mul r0.xyz, r0.yzwy, r0.xxxx
                div r0.xyz, r0.xyzx, l(1.600000, 1.600000, 1.600000, 0.000000)  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 22 instruction slots used
                            
            };
        }

    }

}

